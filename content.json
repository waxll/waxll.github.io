{"meta":{"title":"Waxll'Blog","subtitle":"","description":"","author":"XieSenshi","url":"http://waxll.top","root":"/"},"pages":[{"title":"404 Not Found","date":"2021-03-24T10:59:39.311Z","updated":"2021-03-24T09:55:49.594Z","comments":true,"path":"404.html","permalink":"http://waxll.top/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"404 Not Found","date":"2021-03-24T09:55:49.594Z","updated":"2021-03-24T09:55:49.594Z","comments":true,"path":"404/index.html","permalink":"http://waxll.top/404/index.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除 返回"},{"title":"所有分类","date":"2021-03-24T09:55:49.604Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"categories/index.html","permalink":"http://waxll.top/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-03-24T09:55:49.604Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"about/index.html","permalink":"http://waxll.top/about/index.html","excerpt":"","text":"关于我 在这里我主要分享一些技巧、教程、单片机程序以及记录学习上的心得。希望用这个博客记录我学习提升的过程，多年以后再回头看看，看看自己成长了多少。 为什么写博客？应为牛人都这么干。希望有一天我也能成为一个牛人，毕竟梦想一定要有，万一实现了呢！ 返回"},{"title":"我的朋友们","date":"2021-03-24T15:29:51.981Z","updated":"2021-03-24T15:29:51.981Z","comments":true,"path":"friends/index.html","permalink":"http://waxll.top/friends/index.html","excerpt":"我的朋友们","text":"我的朋友们"},{"title":"更新日志","date":"2020-07-15T12:48:41.000Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"journal/index.html","permalink":"http://waxll.top/journal/index.html","excerpt":"","text":"更新日志 2020-04-12 开始博客搭建 创建GitHub账号 油管学习 2020-04-15 博客初成发布第一篇文章 使用Lx作为主题 以lovekmjb.ml作为域名 2020-07-12 更换博客主题为Volantis 优化页面显示 新增Valine评论系统 新增百度统计 添加网站运行时间及访问量功能 新增字数统计和阅读时长插件 使用 pjax 新增大量特效 2020-07-15 优化体验 更换国内图床 使用hexo-offline-popup插件可自动检测网站更新并以弹窗显示 2020-07-27 增加功能 新增黑暗模式可跟据时间自动识别，并有记忆功能 2020-07-28 优化体验 搬家至Coding，大幅降低链接延迟，提升网站链接速度与体验 持续更新中……"},{"title":"","date":"2021-03-24T09:55:49.604Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"js/dj.js","permalink":"http://waxll.top/js/dj.js","excerpt":"","text":"/* * 鼠标点击特效，canvas点击效果 */ /* Copyright (C) 2013 Justin Windle sketch.min.js, http://soulwire.co.uk */ var Sketch=function(){\"use strict\";function e(e){return\"[object Array]\"==Object.prototype.toString.call(e)}function t(e){return\"function\"==typeof e}function n(e){return\"number\"==typeof e}function o(e){return\"string\"==typeof e}function r(e){return E[e]||String.fromCharCode(e)}function i(e,t,n){for(var o in t)(n||!e.hasOwnProperty(o))&&(e[o]=t[o]);return e}function u(e,t){return function(){e.apply(t,arguments)}}function a(e){var n={};for(var o in e)n[o]=t(e[o])?u(e[o],e):e[o];return n}function c(e){function n(n){t(n)&&n.apply(e,[].splice.call(arguments,1))}function u(e){for(_=0;_= 0; i--) { particles[i].draw(clickparticle); } }; //按下时显示效果，mousedown 换成 click 为点击时显示效果（我用的 click） document.addEventListener(\"mousedown\", function(e) { var max, j; //排除一些元素 \"TEXTAREA\" !== e.target.nodeName && \"INPUT\" !== e.target.nodeName && \"A\" !== e.target.nodeName && \"I\" !== e.target.nodeName && \"IMG\" !== e.target.nodeName && function() { for (max = random(15, 20), j = 0; j < max; j++) clickparticle.spawn(e.clientX, e.clientY); }(); }); }"},{"title":"","date":"2021-03-24T11:00:47.707Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"mylist/index.html","permalink":"http://waxll.top/mylist/index.html","excerpt":"","text":""},{"title":"图库","date":"2020-07-15T12:48:41.000Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"photo3/index.html","permalink":"http://waxll.top/photo3/index.html","excerpt":"","text":"图库 返回 上一页 3/3"},{"title":"图库","date":"2020-07-15T12:48:41.000Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"photo/index.html","permalink":"http://waxll.top/photo/index.html","excerpt":"","text":"图库 返回 下一页 1/3"},{"title":"图库","date":"2020-07-15T12:48:41.000Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"photo2/index.html","permalink":"http://waxll.top/photo2/index.html","excerpt":"","text":"图库 返回 上一页 下一页 2/3"},{"title":"所有标签","date":"2021-03-24T09:55:49.604Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"tags/index.html","permalink":"http://waxll.top/tags/index.html","excerpt":"","text":""},{"title":"爱国富强专供","date":"2020-08-10T05:17:30.000Z","updated":"2021-03-24T09:55:49.614Z","comments":true,"path":"vpn/index.html","permalink":"http://waxll.top/vpn/index.html","excerpt":"","text":"Clash ShadowsocksR Shadowsocks Quantumult"},{"title":"热门标签","date":"2021-03-24T09:55:49.604Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"blog/tags/index.html","permalink":"http://waxll.top/blog/tags/index.html","excerpt":"","text":""},{"title":"鼠标点击效果","date":"2020-07-24T22:00:03.000Z","updated":"2021-03-24T09:55:49.614Z","comments":true,"path":"鼠标点击效果/index.html","permalink":"http://waxll.top/%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C/index.html","excerpt":"","text":"返回 移动端可能无法正常显示"},{"title":"文章分类","date":"2021-03-24T09:55:49.604Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"blog/categories/index.html","permalink":"http://waxll.top/blog/categories/index.html","excerpt":"","text":""},{"title":"Clash for Windos及Clash for Android使用教程","date":"2020-08-10T05:17:30.000Z","updated":"2021-03-24T09:55:49.604Z","comments":true,"path":"vpn/Clash for Windows/index.html","permalink":"http://waxll.top/vpn/Clash%20for%20Windows/index.html","excerpt":"","text":"Clash for Windos已经安装的直接进入第二步 1.安装应用下载安装包 2.订阅链接 打开应用后在状态栏单击图标打开面板 显示如下界面System Proxy默认为关闭 点击左侧的Profiles 打开如下界面 将订阅链接填入文本框中点击Download下载订阅3.启用代理 点击左侧的Proxies 打开如下界面 上方是四个模式的切换，分别为： Global：全局模式，即代理所有流量。在打开一些冷门的外国网站时选择，平时打开会导致国内的一些网站应用打开变慢，甚至无法打开。Rule：规则模式，会按照后台规则进行代理，会绕过国内流量。通常使用该模式。Direct：直连，不代理任何流量，即关闭代理。Script：脚本，按照脚本规则代理。一般不用。通常的设置为Rule模式以及中继线路（推荐中继香港线路）打开General的System Proxy开关启用代理。 4.更新订阅 请确保更新前已关闭代理 若订阅链接没有改变请点击如下最右侧按钮进行更新。若更新失败请重复第二步操作 若订阅链接更改请重复第二步操作 Clash for Android1.安装应用下载安装包 2.订阅链接 安装完成后打开显示如下界面： 点击配置 点击新配置 点击从URL导入1）名称随便填；2）URL填入订阅链接；3）点击右上角保并更新； 3.启用代理 如下图所示选择配置 返回打开代理 点击代理选择节点 右上角可选择模式,默认规则模式 节点选择中继节点(建议香港中继节点) 4.更新订阅 请确保更新前已关闭代理 点击配置–&gt;更多: 点击更新 若订阅链接更改,点击参数更改URL 返回"},{"title":"Shadowsocks","date":"2020-08-10T05:17:30.000Z","updated":"2021-03-24T09:55:49.614Z","comments":true,"path":"vpn/Shadowsocks/index.html","permalink":"http://waxll.top/vpn/Shadowsocks/index.html","excerpt":"","text":"返回"},{"title":"Quantumult","date":"2020-08-10T05:17:30.000Z","updated":"2021-03-24T09:55:49.614Z","comments":true,"path":"vpn/Quantumult/index.html","permalink":"http://waxll.top/vpn/Quantumult/index.html","excerpt":"","text":""},{"title":"ShadowsocksR","date":"2020-08-10T05:17:30.000Z","updated":"2021-03-24T09:55:49.614Z","comments":true,"path":"vpn/SSR/index.html","permalink":"http://waxll.top/vpn/SSR/index.html","excerpt":"","text":"1.下载软件下载压缩包 解压后进入文件夹打开如下软件: 2.订阅链接3.启用代理4.更新订阅返回"}],"posts":[{"title":"Python学习笔记3","slug":"Python学习笔记3","date":"2021-04-01T13:51:14.000Z","updated":"2021-04-01T13:56:12.487Z","comments":true,"path":"2021/04/01/p3.html","link":"","permalink":"http://waxll.top/2021/04/01/p3.html","excerpt":"","text":"第三章 数据类型：字符串字符串字符串使用语法使用引号创建字符串类型数据 知识点： 字符串就是一系列字符。 使用引号创建字符串，引号必须要用英文输入法，中文会出错！。 用引号括起的都是字符串，可以是单引号，也可以是双引号。 字面量：直接通过引号创建的字符串称为字面量。 1234&quot;This is a string.&quot;&#x27;This is also a string.&#x27;#&#x27;This is also a string.&#x27; 通过print在Jupyter中输出所有内容 知识点： Jupyter只输出最后一个字符串。 使用print()函数输出需要输出的内容(不仅是字符串，也可是变量值)。 12345print(&quot;This is a string.&quot;)print(&#x27;This is also a string.&#x27;)#This is a string.#This is also a string. 正确使用引号创建字符串类型数据 知识点： 由于引号在python中有特殊意义，用于标识字符串的起止标识。 如果在&quot;&quot;双引号作为标识的字符串中使用&quot;字符，那么，python就只能把&quot;错误地解析为起止标识，而无法解析为该&quot;字符本身，进而引发语法错误。 为了解决此歧义问题，Python引入了转移字符技术，即通过转义字符\\&#39;和\\&quot;方式来明确告诉Python，当前的字符解析为字符本身，而非起止标识。 123456789print(&#x27;-----------两种引号的嵌套使用------------&#x27;)print(&#x27;I told my friend, &quot;Python is my favorite language!&quot;&#x27;)print(&quot;The language \\&#x27;Python\\&quot; is named after Monty Python.&quot;)print(&quot;One of Python&#x27;s strengths is its diverse.&quot;)#-----------两种引号的嵌套使用------------#I told my friend, &quot;Python is my favorite language!&quot;#The language &#x27;Python&quot; is named after Monty Python.#One of Python&#x27;s strengths is its diverse. 习题 第1题 第2题 第3题 使用方法修改字符串的大小写使用方法title()修改字符串为首字母大写 知识点： Python的字符串敏感于大小写。 比如Ada和ada是不同的字符串。 方法：在类中定义的函数。这里的类指的是特定的类型。 比如在字符串类型str中定义了字符串首字母大写转换函数title()。 方法的调用：变量名.方法()。 首先，创建该类型的变量。 然后，通过该变量来调用对应的方法。 具体程序如下： 123456name = &quot;ada lovelace&quot; # 创建该类型的变量print(type(name)) # &lt;class &#x27;str&#x27;&gt; 查询变量类型print(name.title()) # Ada Lovelace，通过该变量来调用对应的方法# &lt;class &#x27;str&#x27;&gt;# Ada Lovelace 在这个示例中，小写的字符串&quot;ada lovelace&quot;存储到了变量name中。 在print()语句中，方法title()出现在这个变量(对象)的后面。 在name.title()中，name后面的句点（.）让Python对变量name执行方法title()指定的操作。 每个方法后面都跟着一对括号，为方法传入额外的参数(信息)。 函数title()不需要额外的信息，因此它后面的括号是空的。 title()以首字母大写的方式显示每个单词，即将每个单词的首字母都改为大写。这很有用，因为你经常需要将名字视为信息。例如，你可能希望程序将值Ada、ADA和ada视为同一个名字，并将它们都显示为Ada。 使用方法upper()和lower()修改字符串大小写 知识点： # message.lower() : this is string example from runoob….wow!!! # message.upper() : THIS IS STRING EXAMPLE FROM RUNOOB….WOW!!!str.lower()：转换字符串中所有大写字符为小写。 无参数，返回全为小写的字符串。 str.upper()：转换字符串中所有小写字符为大写。 无参数，返回全为大写的字符串。 123456name = &quot;Ada Lovelace&quot;print(name.upper())print(name.lower())# ADA LOVELACE# ada lovelace 123456message = &quot;this is string example from runoob....wow!!!&quot;print(&quot;message.lower() : &quot;, message.lower())print(&quot;message.upper() : &quot;, message.upper())# message.lower() : this is string example from runoob....wow!!!# message.upper() : THIS IS STRING EXAMPLE FROM RUNOOB....WOW!!! 习题 第4题 合并（拼接)字符串字符串拼接操作 知识点： Python使用加号（+）来合并字符串。 拼接的类型必须是字符串，否则会出错。 例如，你可能想将姓和名存储在不同的变量中，等要显示姓名时再将它们合而为一： 12345678print(&quot;--字符串的拼接 通过 + 操作----&quot;)first_name = &quot;ada&quot;last_name = &quot;lovelace&quot;full_name = first_name + &quot; &quot; + last_nameprint(full_name)# --字符串的拼接 通过 + 操作----# ada lovelace 在这个示例中，我们使用+来合并first_name、空格和last_name，以得到完整的姓名。这种合并字符串的方法称为拼接。通过拼接，可使用存储在变量中的信息来创建完整的消息。下面来看一个例子： 123456first_name = &quot;ada&quot;last_name = &quot;lovelace&quot;full_name = first_name + &quot; &quot; + last_nameprint(&quot;Hello, &quot; + full_name.title() + &quot;!&quot;)# Hello, Ada Lovelace! 将字符串拼接的结果存变量中在这里，一个问候用户的句子中使用了全名，并使用了方法title()来将姓名设置为合适的格式。这些代码显示一条格式良好的简单问候语。还可以使用拼接来创建消息，再把整条消息都存储在一个变量中： 12345678first_name = &quot;ada&quot;last_name = &quot;lovelace&quot;full_name = first_name + &quot; &quot; + last_namemessage = &quot;Hello, &quot; + full_name.title() + &quot;!&quot;print(message)# Hello, Ada Lovelace! 上述代码也显示消息“Hello, Ada Lovelace!”，但将这条消息存储在了一个变量中，这让最后的print语句简单得多。 习题 第5题 转义字符使用制表符 知识点： 在程序中，空白泛指任何非打印字符，如空格、制表符和换行符。 可使用空白来组织输出，以使其更易读。 横向制表符：转义字符\\t。 12345print(&quot;\\tPython\\tPython\\tPython\\tPython&quot;)print(&quot;\\tJava\\tJava\\tJava\\tJava&quot;)#Python Python Python Python#Java Java Java Java 使用换行符 知识点： 换行符 ：在字符串中添加换行符，可使用转义字符\\n。 123456print(&quot;Languages:\\nPython\\nC\\nJavaScript&quot;)# Languages:# Python# C# JavaScript 组合使用 知识点： 组合使用：可在同一个字符串中同时包含制表符和换行符。 字符串&quot;\\n\\t&quot;让Python换到下一行，并在下一行开头添加一个制表符。 下面的示例演示了如何使用一个单行字符串来生成四行输出： 123456print(&quot;Languages:\\n\\tPython11111\\tPython\\tPython\\n\\tC\\tC\\n\\tJava\\tJava&quot;)# Languages:# Python11111 Python Python# C C# Java Java 引号和反斜杠 知识点： 单引号：\\&#39;。 双引号：\\&quot;。 反斜杠符号：\\\\。 习题 第6题 第7题 删除字符串中的空白认识程序中的空白 知识点： 对人来说，&#39;python&#39;和&#39;python &#39;看起来几乎一样。 对程序来说，它们却是两个不同的字符串。 程序对字符串中的空白敏感。 处理字符串中的空白很重要，因为经常需要比较两个字符串是否相同。例如，在用户登录网站时检查其用户名。通过对字符串空白删除操作，对用户输入数据中的多余空白进行删除。 使用方法rstrip()删除字符串末尾空白 知识点：rstrip()方法 调用语法：str.rstrip([chars])。 描述：删除 string字符串末尾的指定字符，默认为空格。 参数：chars，指定删除的字符，默认为空格。 返回：删除 string字符串末尾的指定字符后生成的新字符串。 123456789favorite_language = &#x27; python &#x27;print(favorite_language)# &#x27; python &#x27;print(favorite_language.rstrip())# &#x27; python&#x27;print(favorite_language)# &#x27; python &#x27; 分析： 存储在变量favorite_language中的字符串末尾包含多余的空白。Jupyter输出可看到末尾的空格。 对变量favorite_language调用方法rstrip()后，这个多余的空格被删除了。 然而，这种删除只是暂时的，在Jupyter输出中输出favorite_language时，会发现它依然包含多余的空白。 设置参数chars，删除指定的字符。 1234567str = &quot; this is string example....wow!!! &quot;print (str.rstrip()) # 默认为空白# this is string example....wow!!!str = &quot;*****this is string example....wow!!!*****&quot;print (str.rstrip(&#x27;*&#x27;)) # 指定字符*# *****this is string example....wow!!! 永久删除字符串的空白要永久删除这个字符串中的空白，必须将删除操作的结果存回到变量中。 12345print(&#x27;-------通过赋值的方式覆盖原字符串-----------&#x27;)favorite_language = &#x27; python &#x27;favorite_language = favorite_language.rstrip()print(favorite_language)# &#x27; python&#x27; 分析： 因为rstrip()操作不直接修改字符串，而是返回一个新的字符串。 在编程中，经常需要修改变量的值，再将新值存回到原来的变量中。 使用方法lstrip()和strip()删除字符串首和两端空白Python还可以删除字符串开头的空白，或同时剔除字符串两端的空白。为此，可分别使用方法lstrip()和strip()。在这个示例中，我们首先创建了一个开头和末尾都有空白的字符串。接下来，我们分别删除末尾、开头和两端的空格。 12345678910111213print(&#x27;------Jupyter对赋值语句结果不输出----------&#x27;)favorite_language = &#x27; python &#x27;print(favorite_language)# &#x27; python &#x27;print(favorite_language.rstrip())# &#x27; python&#x27;print(favorite_language.lstrip())# &#x27;python &#x27;print(favorite_language.strip())# &#x27;python&#x27; 习题 第8题 第9题 字符串引起的语法错误字符串引号引起的语法错误 知识点： 语法错误在编程过中经常会被遇到，当程序中包含非法的Python代码时，就会导致语法错误。 可通过Python解释器提供的错误信息，来较快的解决。 下面演示了如何正确地使用单引号和双引号。撇号位于两个双引号之间，因此Python解释器能够正确地理解这个字符串： 1234message = &quot;One of Python&#x27;s strengths is its diverse community.&quot;print(message)# One of Python&#x27;s strengths is its diverse community. 在用单引号括起的字符串中，如果包含撇号，就将导致错误。这是因为这会导致Python将第一个单引号和撇号之间的内容视为一个字符串，进而将余下的文本视为Python代码，从而引发错误。因为，Python将无法正确地确定字符串的结束位置： 12345message = &#x27;One of Python&#x27;s strengths is its diverse community.&#x27;# File &quot;&lt;stdin&gt;&quot;, line 1# message = &#x27;One of Python&#x27;s strengths is its diverse community.&#x27;# ^#SyntaxError: invalid syntax 从上述输出可知，错误发生在第二个单引号后面。这种语法错误表明，在解释器看来，其中的有些内容不是有效的Python代码。 知识点： 编写程序时，编辑器的语法突出功能可帮助你快速找出某些语法错误。 看到Python代码以普通句子的颜色显示，或者普通句子以Python代码的颜色显示时，就可能意味着文件中存在引号不匹配的情况。 习题 第10题 第11题 第12题 第13题 第14题 (重要)格式化字符串.format()函数的语法认识.format()字符串格式化函数Python提供了.format()字符串格式化函数。该函数操作起来方便，可读性很强。 .format()函数常与print()函数结合使用，具备很强的格式化输出能力。 知识点：.format()字符串格式化函数。 语法：str.format(**args)。 例如：&quot;&#123;&#125; &#123;&#125;&quot;.format(&quot;hello&quot;, &quot;world&quot;)。 描述：该函数将通过&#123;&#125;和:来设置模板字符串str，然后通过.format(**args)传入实参来对str进行格式化。 模板字符串str中包含由大括号&#123;&#125;包围的“替换字段”。 &#123;&#125;中填写文本替换和格式化规则，如果不填任何规则(直接使用&#123;&#125;)，则进行直接替换。 具体的“替换字段”由args参数传入。 .format()函数中有几个参数，模板字符串str中包含几个&#123;&#125;。 该函数使用方法较多，下面将一一介绍。 认识.format()函数默认参数位置知识点：.format()函数的默认位置。 不指定格式化位置，按照默认顺序格式化。 args参数以,相隔，按顺序填入相应的&#123;&#125;。 str字符串模板中的&#123;&#125;数量不能超过参数个数，否则会出错。 1234str1 = &quot;&#123;&#125; &#123;&#125;&quot;.format(&quot;hello&quot;, &quot;world&quot;)print(str1)# hello world .format()函数中有2个参数，模板字符串str中包含2个&#123;&#125;。 模板字符串str为&quot;&#123;&#125; &#123;&#125;&quot;，仅包含两个&#123;&#125;。 args参数包括：&quot;hello&quot;和&quot;world&quot;。 根据规则，按照默认顺序格式化str。&quot;hello&quot;填入第1个&#123;&#125;；&quot;world&quot;填入第2个&#123;&#125;。 IndexError错误知识点：当&#123;&#125;超过args输入参数个数时，会出错IndexError。 12345678910str1 = &quot;&#123;&#125; &#123;&#125; &#123;&#125;&quot;.format(&quot;hello&quot;, &quot;world&quot;)print(str1)# ---------------------------------------------------------------------------# IndexError Traceback (most recent call last)# &lt;ipython-input-3-eb58e09cec2c&gt; in &lt;module&gt;# ----&gt; 1 str1 = &quot;&#123;&#125; &#123;&#125; &#123;&#125;&quot;.format(&quot;hello&quot;, &quot;world&quot;)# 2 print(str1)# IndexError: Replacement index 2 out of range for positional args tuple .format()函数的位置索引知识点：.format()函数的3中位置索引方式：默认位置索引、序号位置索引和关键字位置索引。 参数的序号位置索引 知识点：.format()函数的参数的序号位置索引。 设置参数索引来指定格式化的位置。 为str字符串模板设置带参数索引的&#123;&#125;。 参数索引从0开始，即第1个参数，对应&#123;0&#125;。 1234str1 = &quot;&#123;1&#125; &#123;0&#125;&quot;.format(&quot;hello&quot;, &quot;world&quot;)print(str1)# world hello 模板字符串str为&quot;&#123;0&#125; &#123;1&#125;&quot;，在每个&#123;&#125;中包含数字，来指明所替换的参数索引。 args参数包括：&quot;hello&quot;对应第0参数索引、&quot;world&quot;对应第1参数索引。 根据规则，按照参数索引格式化str。&quot;hello&quot;填入&#123;0&#125;；&quot;world&quot;填入&#123;1&#125;。 位置索引可重复使用 知识点：参数索引可以重复使用来替换字符串。 1234str1 = &quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;.format(&quot;hello&quot;, &quot;world&quot;)print(str1)# world hello world .format()参数的关键字位置索引 知识点：.format()函数的关键字位置索引。 设置关键字来指定格式化的位置。该功能与数字位置类似。 为str字符串模板设置带关键字的&#123;&#125;，指定参数替代字符串模板的位置。 关键字可以为位置取更有意义的标识。 注意：在使用关键字索引时，避免使用0和o、1和l，以免混淆。 123# 下面的关键字l很容易被误认为是1str1 = &#x27;I &#123;l&#125; &#123;p&#125;, and I\\&#x27;am learning &#123;p&#125;&#x27;.format(p=&#x27;Python&#x27;, l=&#x27;like&#x27;)print(str1) .format()函数样式格式输出.format()函数的填充与格式化 知识点：.format()函数的填充与格式化。 大括号中可以设定特殊的格式：&#123;:[填充字符][对齐方式 &lt;^&gt;][宽度]&#125; :为格式起始标志，不能少。 :号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。 对齐方式：&lt;^&gt;分别为左、中、右对齐。 宽度：整形，指定填充位置宽度，如果替换文本比这个宽度小，则用填充字符进行填充。 123456789101112# 左对齐，使用*填充，宽度为10str1 = &#x27;Hello &#123;:*&lt;10&#125; &#x27;.format(1111)print(str1)# 居中对齐，使用@填充，宽度为20str1 = &#x27;Hello &#123;:@^20&#125; &#x27;.format(1111)print(str1)# 右对齐，使用&gt;填充，宽度为12。#第一个&gt;为填充字符，第2个&gt;为右对齐str1 = &#x27;Hello &#123;:&gt;&gt;12&#125; &#x27;.format(1111)print(str1) 定制输出格式： &#123;:&gt;n&#125; 将字段设置为n个字符，并让内容右对齐。数字默认右对齐。 &#123;: 将字段设置为n`个字符，并让内容左对齐。非数字的字符默认左对齐。 &#123;:^n&#125; 将字段设置为n个字符，并让内容居中。 12345678910111213141516171819x = &#x27;hello&#x27;y = &#x27;hi&#x27;print(&#x27;------format(): 字符默认左对齐，数字默认右对齐 -----&#x27;)format_str = &#x27;&#123;:8&#125; results in &#123;&#125;.&#x27;print(format_str.format(x, y))print(format_str.format(1111, y))# hello results in hi.# 1111 results in hi.print(&#x27;------format(): 右对齐 -----&#x27;)format_str = &#x27;&#123;:&gt;8&#125; results in &#123;&#125;.&#x27;print(format_str.format(x, y))print(format_str.format(1111, y))# hello results in hi.# 1111 results in hi.print(&#x27;------普通输出 -----&#x27;)print(x + &#x27; results in&#x27; + y)# hello results inhi 输出以右对齐的方式打印2~20的偶数，每个字段的宽度都设置为3个字符。 .format()函数的精度 知识点：.format()函数的精度。 大括号中可以设定特殊的格式：&#123;:[m].[n][格式]&#125; :为格式起始标志，不能少。 m为整形，整数部分的宽度。 默认值为原数字整数部分的长度。 如果m大于整数部分的长度，则有空格左边填充。 .为小数点。 n为整形，小数点后保留几位精度。 默认值为原数字小数部分的长度。 如果n大于小数部分的长度，则有0补全填充。 格式：f为浮点数。 1234567#m=10，n=1，f为浮点数print(&#x27;&#123;:10.1f&#125;&#x27;.format(311.1415926))# 311.1#m为默认，n=4，f为浮点数print(&#x27;&#123;:.4f&#125;&#x27;.format(3.14))# 3.1400 .format()函数的进制转换 知识点：进制转换，b、d、o、x 分别是二进制、十进制、八进制、十六进制。 12345678print(&#x27;&#123;:b&#125;&#x27;.format(11))print(&#x27;&#123;:d&#125;&#x27;.format(11))print(&#x27;&#123;:o&#125;&#x27;.format(11))print(&#x27;&#123;:x&#125;&#x27;.format(11))# 1011# 11# 13# b .format()函数的数字格式输出 请使用.format()函数得到下面的结果运行结果。 数字(输入) 格式 输出 描述(结果) 3.1415926 {:.2f} 3.14 保留小数点后两位 3.1415926 {:+.2f} +3.14 带符号保留小数点后两位 -1 {:+.2f} -1.00 带符号保留小数点后两位 2.71828 {:.0f} 3 不带小数 5 {:0&gt;2d} 05 数字补零 (填充左边, 宽度为2) 5 {:x&lt;4d} 5xxx 数字补x (填充右边, 宽度为4) 10 {:x&lt;4d} 10xx 数字补x (填充右边, 宽度为4) 1000000 {:,} 1,000,000 以逗号分隔的数字格式 0.25 {:.2%} 25.00% 百分比格式 1000000000 {:.2e} 1.00e+09 指数记法 13 {:&gt;10d} 13 右对齐 (默认, 宽度为10) 13 {:&lt;10d} 13 左对齐 (宽度为10) 13 {:^10d} 13 中间对齐 (宽度为10) f-string技术初识f-stringf-string基本介绍f-string，亦称为格式化字符串常量（formatted string literals），是Python3.6新引入的一种字符串格式化方法，主要目的是使格式化字符串的操作更加简便。 知识点： f-string在形式上是以 f 或 F 修饰符引领的字符串（f&#39;xxx&#39; 或 F&#39;xxx&#39;），以大括号 &#123;&#125; 标明被替换的字段 f-string在本质上并不是字符串常量，而是一个在运行时运算求值的表达式。 f-string在功能方面不逊于传统的%-formatting语句和str.format()函数，同时性能又优于二者，且使用起来也更加简洁明了，因此对于Python3.6及以后的版本，推荐使用f-string进行字符串格式化。 f-string语法 知识点： 语法：f&#39;&lt;text&gt; &#123;&lt;content:format specifier&gt;&#125; &lt;text&gt; ...&#39; f是f-string的标识符，位于字符串标识符&#39;之前。标识符不能忘记。 &lt;text&gt;：为普通字符串文本。 &#123;&lt;content&gt;&#125;：大括号是需要被替换的字段，外部传入的变量名为&lt;expr&gt;。 &lt;:format specifier&gt;：可选，类似于.format()，自定义的格式。 例如：f&#39;s is &#123;s:8s&#125;&#39;，其中s is 是&lt;text&gt;；&#123;s:8s&#125;中s为&lt;content&gt;，8s为格式，中间:间隔。 f-string用大括号 &#123;&#125; 表示被替换字段，其中直接填入替换内容： 123456789101112131415name = &#x27;Eric&#x27;str = f&#x27;Hello, my name is &#123;name&#125;&#x27;# &#x27;Hello, my name is Eric&#x27;print(str)number = 7str = f&#x27;My lucky number is &#123;number&#125;&#x27;# &#x27;My lucky number is 7&#x27;print(str)price = 19.99str = f&#x27;The price of this book is &#123;price&#125;&#x27;# &#x27;The price of this book is 19.99&#x27;print(str) 深入f-string表达式求值与函数调用f-string的大括号 &#123;&#125; 可以填入表达式或调用函数，Python会求出其结果并填入返回的字符串内： 1234567891011121314151617str = f&#x27;A total number of &#123;24 * 8 + 4&#125;&#x27;# &#x27;A total number of 196&#x27;print(str)str = f&#x27;Complex number &#123;(2 + 2j) / (2 - 3j)&#125;&#x27;# &#x27;Complex number (-0.15384615384615388+0.7692307692307692j)&#x27;print(str)name = &#x27;ERIC&#x27;str = f&#x27;My name is &#123;name.lower()&#125;&#x27;# &#x27;My name is eric&#x27;print(str)import mathstr = f&#x27;The answer is &#123;math.log(math.pi)&#125;&#x27;# &#x27;The answer is 1.1447298858494002&#x27;print(str) 引号、大括号与反斜杠f-string大括号内所用的引号不能和大括号外的引号定界符冲突，可灵活切换 &#39; 和 &quot;： 123456str = f&#x27;I am &#123;&quot;Eric&quot;&#125;&#x27;# &#x27;I am Eric&#x27;print(str)# SyntaxError: invalid syntaxstr = f&#x27;I am &#123;&#x27;Eric&#x27;&#125;&#x27; 若 &#39; 和 &quot; 不足以满足要求，还可以使用 &#39;&#39;&#39; 和 &quot;&quot;&quot;： 12345# SyntaxError: invalid syntaxstr = f&quot;He said &#123;&quot;I&#x27;m Eric&quot;&#125;&quot;# SyntaxError: invalid syntaxstr = f&#x27;He said &#123;&quot;I&#x27;m Eric&quot;&#125;&#x27; 1234567str = f&quot;&quot;&quot;He said &#123;&quot;I&#x27;m Eric&quot;&#125;&quot;&quot;&quot;# &quot;He said I&#x27;m Eric&quot;print(str)str = f&#x27;&#x27;&#x27;He said &#123;&quot;I&#x27;m Eric&quot;&#125;&#x27;&#x27;&#x27;# &quot;He said I&#x27;m Eric&quot;print(str) 大括号外的引号还可以使用 \\ 转义，但大括号内不能使用 \\ 转义： 123str = f&#x27;&#x27;&#x27;He\\&#x27;ll say &#123;&quot;I&#x27;m Eric&quot;&#125;&#x27;&#x27;&#x27;# &quot;He&#x27;ll say I&#x27;m Eric&quot;print(str) 12# SyntaxError: f-string expression part cannot include a backslashstr = f&#x27;&#x27;&#x27;He&#x27;ll say &#123;&quot;I\\&#x27;m Eric&quot;&#125;&#x27;&#x27;&#x27; f-string大括号外如果需要显示大括号，则应输入连续两个大括号 &#123;&#123;` 和 `&#125;&#125;： 1234567str = f&#x27;5 &#123;&quot;&#123;stars&#125;&quot;&#125;&#x27;# &#x27;5 &#123;stars&#125;&#x27;print(str)str = f&#x27;&#123;&#123;5&#125;&#125; &#123;&quot;stars&quot;&#125;&#x27;# &#x27;&#123;5&#125; stars&#x27;print(str) f-string大括号内不能使用 \\ 转义，事实上不仅如此，f-string大括号内根本就不允许出现 \\。如果确实需要 \\，则应首先将包含 \\ 的内容用一个变量表示，再在f-string大括号内填入变量名： 12# SyntaxError: f-string expression part cannot include a backslashstr = f&quot;newline: &#123;ord(&#x27;\\n&#x27;)&#125;&quot; 12345# ord()为将&#x27;\\n&#x27;的ASCII码转为八进制newline = ord(&#x27;\\n&#x27;)str = f&#x27;newline: &#123;newline&#125;&#x27;# &#x27;newline: 10&#x27;print(str) 多行f-stringf-string还可用于多行字符串： 123456789101112131415name = &#x27;Eric&#x27;age = 27# 多行字符串用 \\ 拼接str = f&quot;Hello!&quot; \\f&quot;I&#x27;m &#123;name&#125;.&quot; \\f&quot;I&#x27;m &#123;age&#125;.&quot;# &quot;Hello!I&#x27;m Eric.I&#x27;m 27.&quot;print(str)# &quot;&quot;&quot;中间的字符串可以直接换行str = f&quot;&quot;&quot;Hello!I&#x27;m &#123;name&#125;.I&#x27;m &#123;age&#125;.&quot;&quot;&quot;# &quot;Hello!\\n I&#x27;m Eric.\\n I&#x27;m 27.&quot;print(str) 自定义f-string格式自定义格式f-string采用 &#123;content:format&#125; 设置字符串格式，其中 content 是替换并填入字符串的内容，可以是变量、表达式或函数等，format 是格式描述符。自定义格式与.format()类似。采用默认格式时不必指定 &#123;:format&#125;，如上面例子所示只写 &#123;content&#125; 即可。 宽度与精度相关格式描述符 格式描述符 含义与作用 width 整数 width 指定宽度 0width 整数 width 指定宽度，开头的 0 指定高位用 0 补足宽度 width.precision 整数 width 指定宽度，整数 precision 指定显示精度 数值类型基本格式 格式描述符 含义与作用 适用变量类型 s 普通字符串格式 字符串 b 二进制整数格式 整数 c 字符格式，按unicode编码将整数转换为对应字符 整数 d 十进制整数格式 整数 o 八进制整数格式 整数 x 十六进制整数格式（小写字母） 整数 X 十六进制整数格式（大写字母） 整数 e 科学计数格式，以e表示×10^ 浮点数、复数、整数（自动转换为浮点数） E 与e等价，但以E表示×10^ 浮点数、复数、整数（自动转换为浮点数） f 定点数格式，默认精度（precision）是6 浮点数、复数、整数（自动转换为浮点数） F 与f等价，但将nan和inf换成NAN和INF 浮点数、复数、整数（自动转换为浮点数） g 通用格式，小数用f，大数用e 浮点数、复数、整数（自动转换为浮点数） G 与G等价，但小数用F，大数用E 浮点数、复数、整数（自动转换为浮点数） % 百分比格式，数字自动乘上100后按f格式排版，并加%后缀 浮点数、整数（自动转换为浮点数） 12345678910111213141516171819# &#123;content:format&#125;# a 为 content# : 之后为formata = 123.456str = f&#x27;a is &#123;a:8.2f&#125;&#x27;# &#x27;a is 123.46&#x27;print(str)str = f&#x27;a is &#123;a:08.2f&#125;&#x27;# &#x27;a is 00123.46&#x27;print(str)str = f&#x27;a is &#123;a:8.2e&#125;&#x27;# &#x27;a is 1.23e+02&#x27;print(str)str = f&#x27;a is &#123;a:8.2%&#125;&#x27;# &#x27;a is 12345.60%&#x27;print(str) 123456789101112str = f&#x27;a is &#123;a:8.2g&#125;&#x27;# &#x27;a is 1.2e+02&#x27;print(str)s = &#x27;hello&#x27;str = f&#x27;s is &#123;s:8s&#125;&#x27;# &#x27;s is hello &#x27;print(str)str = f&#x27;s is &#123;s:8.3s&#125;&#x27;# &#x27;s is hel &#x27;print(str) 对齐方式相关格式描述符 格式描述符 含义与作用 &lt; 左对齐（字符串默认对齐方式） &gt; 右对齐（数值默认对齐方式） ^ 居中 数字符号相关格式描述符（只适合数值类型） 格式描述符 含义与作用 + 负数前加负号（-），正数前加正号（+） - 负数前加负号（-），正数前不加任何符号（默认） （空格） 负数前加负号（-），正数前加一个空格 数字显示方式相关格式描述符(是否加#) 数值类型 不加**#**（默认） 加**#** 区别 二进制整数 ‘1111011’ ‘0b1111011’ 开头是否显示 0b 八进制整数 ‘173’ ‘0o173’ 开头是否显示 0o 十进制整数 ‘123’ ‘123’ 无区别 十六进制整数（小写字母） ‘7b’ ‘0x7b’ 开头是否显示 0x 十六进制整数（大写字母） ‘7B’ ‘0X7B’ 开头是否显示 0X 12345# 居中&#x27;^&#x27;，显示0X前缀&#x27;#&#x27;，宽度10位，十六进制整数（大写字母）a = 1234str = f&#x27;a is &#123;a:^#10X&#125;&#x27; # &#x27;a is 0X4D2 &#x27;print(str) 12345# 左对齐，宽度10位，显示正号（+），定点数格式，2位小数b = 1234.5678str = f&#x27;b is &#123;b:&lt;+10.2f&#125;&#x27; # &#x27;b is +1234.57 &#x27;print(str) 12345# 高位补零，宽度15位，十进制整数，使用,作为千分分割位c = 12345678str = f&#x27;c is &#123;c:015,d&#125;&#x27; # &#x27;c is 000,012,345,678&#x27;print(str) 12345# 宽度30位，科学计数法，3位小数d = 0.5 + 2.5jstr = f&#x27;d is &#123;d:30.3e&#125;&#x27; # &#x27;d is 5.000e-01+2.500e+00j&#x27;print(str) 任务第1题题目要求： 使用单引号和双引号分别创建字符串(可以用中文作为字符串内容)。 代码如下： 12&quot;hello world&quot;&#x27;hello world&#x27; 运行结果： 1&#39;hello world&#39; 第2题题目要求： 创建含有引号的字符串，观察引号错误使用引起的错误。 代码如下： 1&quot;hello&quot;world&quot; 运行结果： 1234 File &quot;&lt;ipython-input-2-47bd8e44abc4&gt;&quot;, line 1 &quot;hello&quot;world&quot; ^SyntaxError: invalid syntax 第3题题目要求： 创建含有引号的字符串，使用转义字符。 代码如下： 1print(&quot;\\&quot;hello\\&quot;wprld&quot;) 运行结果： 1&quot;hello&quot;wprld 第4题题目要求： 使用input()输入1个字符串，并使用上述3个字符串的方法对该字符串进行修改操作，并输出结果。 代码如下： 12345massage=input()print(massage.title())print(massage.upper())print(massage.lower())# massage=&#x27;hello world&#x27; 运行结果： 123Hello WorldHELLO WORLDhello world 第5题题目要求： 接受键盘输入，将输入字符串储存到变量，然后进行字符串拼接，最后输出 “你好，姓名”。 代码如下： 123name=input()print(&#x27;你好，&#x27;+name)# name=XieSenshi 运行结果： 1你好，XieSenshi 第6题题目要求： 使用制表符和换行符分别自定义创建字符串(可以为中文)，并输出结果。 代码如下： 12print(&quot;System:\\tWindows\\tLinux\\tMacOS\\tAndroid\\tiOS&quot;)print(&quot;System:\\nWindows\\nLinux\\nMacOS\\nAndroid\\niOS&quot;) 运行结果： 1234567System: Windows Linux MacOS Android iOSSystem:WindowsLinuxMacOSAndroidiOS 第7题题目要求： 组合使用制表符(3列)和换行符(2行)自定义创建字符串(可以为中文)，并输出结果。 代码如下： 1print(&quot;System:\\tWindows\\tLinux\\tMacOS\\n\\tAndroid\\tiOS&quot;) 运行结果： 12System: Windows Linux MacOS Android iOS 第8题题目要求： 外部输入含有空格的字符串，使用上述方法对字符串进行空白删除处理。 代码如下： 123456massage=input()print(massage)print(massage.lstrip())print(massage.rstrip())print(massage.strip())# massage=&quot; Hello world &quot; 运行结果： 1234 hello world hello world hello worldhello world 第9题题目要求： 外部输入含有空格的字符串，指定chars参数，分别rstrip()、lstrip()和strip()调用删除特定字符。 代码如下： 123456massage=input()print(massage)print(massage.lstrip(&#x27;h&#x27;))print(massage.rstrip(&#x27;d&#x27;))print(massage.strip(&#x27;h&#x27;))# masage=&quot;hello world&quot; 运行结果： 1234hello worldello worldhello worlello world 第10题题目要求： 个性化消息：将用户的姓名存到一个变量中，并向该用户显示一条消息。显示的消息应非常简单，如“Hello Eric, would you like to learn some Python today?”。 代码如下： 12name=&#x27;Eric&#x27;print(&#x27;Hello &#x27;+name+&#x27;, would you like to learn some Python today?&#x27;) 运行结果： 1Hello Eric, would you like to learn some Python today? 第11题题目要求： 调整名字的大小写：将一个人名存储到一个变量中，再以小写、大写和首字母大写的方式显示这个人名。 代码如下： 1234name=&quot;xiesenshi&quot;print(name.lower # 小写print(name.upper()) # 大写print(name.title()) # 首字母大写 运行结果： 123xiesenshiXIESENSHIXiesenshi 第12题题目要求： 名言：找一句你钦佩的名人说的名言，将这个名人的姓名和他的名言打印出来。输出应类似于下面这样（包括引号）：Albert Einstein once said, “A person who never made a mistake never tried anything new.” 代码如下： 1print(&#x27;Albert Einstein once said, “A person who never made a mistake never tried anything new.”&#x27;) 运行结果： 1Albert Einstein once said, “A person who never made a mistake never tried anything new.” 第13题题目要求： 名言2：重复练习11-14，但将名人的姓名存储在变量famous_person中，再创建要显示的消息，并将其存储在变量message中，然后打印这条消息。 代码如下： 123famous_person=&quot;Albert Einstein&quot;massage=famous_person + &quot; once said, “A person who never made a mistake never tried anything new.”&quot;print(massage) 运行结果： 1Albert Einstein once said, “A person who never made a mistake never tried anything new.” 第14题题目要求： 剔除人名中的空白：存储一个人名，并在其开头和末尾都包含一些空白字符。务必至少使用字符组合&quot;\\t&quot;和&quot;\\n&quot;各一次。打印这个人名，以显示其开头和末尾的空白。然后，分别使用剔除函数lstrip()、rstrip()和strip()对人名进行处理，并将结果打印出来。 代码如下： 123456name=&quot; XieSenshi &quot;print(name+&#x27;\\t&#x27;+name+&#x27;\\t&#x27;+name)print(name+&#x27;\\n&#x27;+name+&#x27;\\n&#x27;+name)print(name.lstrip())print(name.rstrip())print(name.strip()) 运行结果： 1234567 XieSenshi XieSenshi XieSenshi XieSenshi XieSenshi XieSenshi XieSenshi XieSenshiXieSenshi","categories":[],"tags":[]},{"title":"第二章 变量与数据类型","slug":"Python学习笔记2","date":"2021-03-24T18:55:10.000Z","updated":"2021-03-24T19:04:13.492Z","comments":true,"path":"2021/03/25/p2.html","link":"","permalink":"http://waxll.top/2021/03/25/p2.html","excerpt":"","text":"第二章 变量与数据类型变量变量的定义为何需要变量？ 变量的功能：通过一个有意义的标识(变量)，将变量与某个具体内容(数值、数组、对象等)进行关联，方便访问。 门牌号与房子、人与人名。 通过变量，不需要记住存放内容的内存物理地址。 在Python中，变量存的是记录具体数据的地址。 123456print(&#x27;---------将变量与字面量进行关联，便于访问和使用。--------------&#x27;)message = &quot;Hello Python world!&quot; #将字符串字面量赋值给message变量print(message, type(message))输出：---------将变量与字面量进行关联，便于访问和使用。--------------Hello Python world! &lt;class &#x27;str&#x27;&gt; 知识点： Jupyter在命令模式下开启cell的行号。 快捷键L。 变量的命名和使用在Python中使用变量时，需要遵守一些规则。违反这些规则将引发错误。请务必牢记下述有关变量的规则： 变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message。 变量名不能包含空格，但可使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误。 不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print。 有意义的变量名，应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好。 慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0。 要创建良好的变量名，需要经过一定的实践，在程序复杂而有趣时尤其如此。随着你编写的程序越来越多，并开始阅读别人编写的代码，将越来越善于创建有意义的变量名。 注意 就目前而言，应使用小写的Python变量名。在变量名中使用大写字母虽然不会导致错误，但避免使用大写字母是个不错的主意。 1234greeting_message = 111print(greeting_message)输出：111 变量命名的常见错误123456789101112print(&quot;------------没有被赋值的变量，使用会出现NameError错误----------&quot;)mesage = &quot;Hello Python World!&quot;print(message)#-------------报错信息-------------NameError Traceback (most recent call last)&lt;ipython-input-41-80779f5fb05f&gt; in &lt;module&gt; 1 print(&quot;---没有被赋值的变量，使用会出现NameError错误---&quot;) 2 mesage = &quot;Hello Python World!&quot;----&gt; 3 print(message)NameError: name &#x27;message&#x27; is not defined 数值类型整数类型掌握整数类型的四则运算​ 在Python中，可对整数执行加（+）减（-）乘（*）除（/）等运算。 123456789101112print(2 + 3)#结果：5print(3 - 2)#结果：1print(2 * 3)#结果：6print(3 / 2) # 浮点数除法#结果：1.5print(3 // 2) # 商#结果：1print(3 % 2) # 余数#结果：1 掌握整数类型的指数运算​ 在终端会话中，Python直接返回运算结果。Python使用两个乘号表示乘方运算. 123456print(3 ** 2)#结果：9print(3 ** 3)#结果：27print(10 ** 6)#结果：1000000 掌握运算的优先级​ Python还支持运算次序，因此你可在同一个表达式中使用多种运算。你还可以使用括号来修改运算次序，让Python按你指定的次序执行运算，如下所示： 12print(2 + 3*4)print((2 + 3) * 4) ​ 运行结果： 121420 在这些示例中，空格不影响Python计算表达式的方式，它们的存在旨在让你阅读代码时，能迅速确定先执行哪些运算。 习题四。 浮点类型掌握浮点数类型运算操作知识点： Python将带小数点的数字都称为浮点数。 小数点可出现在数字的任何位置。 1234print(0.1 + 0.1)# 结果：0.2print(0.2 - 0.2)# 结果：0.0 掌握浮点数运算误差知识点： 由于计算机采用二进制工作，很多小数都没法被二进制准确表示。 因此，Python的浮点数小数位并不精确。 123456print(0.2 * 0.1)# 结果：0.020000000000000004print(0.3 / 0.2)# 结果：1.4999999999999998print(3 * 0.1)# 结果：0.30000000000000004 如何正确比较两个浮点数大小知识点： 浮点数是不确定数，所以不能用==等号判断两个浮点数相等。 整数是确定数，所以能用==等号判断两个整数相等。 不仅仅是Python，其他所有语言的浮点数都存在误差。 1234a = 0.2 + 0.1b = 3 * 0.1print( (a - b) &lt;= 10**(-6) )# 结果：True 习题五 str()的使用字符串不能和数值类型拼接 常常需要在消息中使用字符串拼接，在构造完整的消息信息。例如，要祝某人生日快乐，可能会编写代码打印一条简单的生日祝福语：Happy 23rd birthday!。但如果运行如下代码，将会触发类型错误： 12345678910111213age = 23message = &quot;Happy &quot; + age + &quot;rd Birthday!&quot;print(message)---------------------------------------------TypeError Traceback (most recent call last)&lt;ipython-input-103-4d54be8cf23f&gt; in &lt;module&gt; 1 age = 23----&gt; 2 message = &quot;Happy &quot; + age + &quot;rd Birthday!&quot; 3 4 print(message)TypeError: can only concatenate str (not &quot;int&quot;) to str 分析： 这是一个**类型错误(TypeError)**，无法执行对字符类型str和数值类型int的数据直接相加。 运算操作数需要类型匹配，否则将会触发TypeError。 使用str()转换非字符类型数据知识点： 需要显式地将数值类型转换为字符串类型。 可调用函数str()，它让Python将非字符串值转换为字符串。 在字符串拼接时，特别要注意拼接的变量类型是否是字符串，否则就会出现类型错误。 1234age = 23message = &quot;Happy &quot; + str(age) + &quot;rd Birthday!&quot;print(message)# Happy 23rd Birthday! 习题六 注释如何编写注释(快捷键ctrl+/)知识点： 注释让你能够使用自然语言在程序中添加说明。 在Python中，注释用井号（#）标识。井号后面的内容都会被Python解释器忽略。 注释快捷键：ctrl+/ 123# 向大家问好print(&quot;Hello Python people!&quot;)# 结果：Hello Python people! Python解释器将忽略第1行，只执行第2行。 多行注释知识点： 多行注释用三个单引号 &#39;&#39;&#39; 或者三个双引号 &quot;&quot;&quot; 将注释括起来。 123456&#x27;&#x27;&#x27;这是多行注释，用三个单引号这是多行注释，用三个单引号这是多行注释，用三个单引号&#x27;&#x27;&#x27;print(&quot;Hello, World!&quot;) 123456&quot;&quot;&quot;这是多行注释，用三个双引号这是多行注释，用三个双引号这是多行注释，用三个双引号&quot;&quot;&quot;print(&quot;Hello, World!&quot;) 熟悉该编写什么样的注释 在开发项目期间，你对各个部分如何协同工作了如指掌，但过段时间后，有些细节你可能不记得了。当然，你总是可以通过研究代码来确定各个部分的工作原理，但通过编写注释，以清晰的自然语言对解决方案进行概述，可节省很多时间。 要成为专业程序员或与其他程序员合作，就必须编写有意义的注释。当前，大多数软件都是合作编写的，编写者可能是同一家公司的多名员工，也可能是众多致力于同一个开源项目的人员。训练有素的程序员都希望代码中包含注释，因此你最好从现在开始就在程序中添加描述性注释。作为新手，最值得养成的习惯之一是，在代码中编写清晰、简洁的注释。 如果不确定是否要编写注释，就问问自己，找到合理的解决方案前，是否考虑了多个解决方案。如果答案是肯定的，就编写注释对你的解决方案进行说明吧。相比回过头去再添加注释，删除多余的注释要容易得多。 习题七 任务第1题题目要求： 添加了一个名为message的变量。每个变量都存储了一个值——与变量相关联的信息。 在这里，存储的值为字符串“Hello Python world!”。 第1行代码，用于代码注释输出。 第2行代码，它将字符串字面量“Hello Python world!”与变量message关联起来； 第3行代码，它将与变量message关联的值打印到屏幕。 修改程序，使其再打印一条消息： 代码如下： 123print(&#x27;---------在创建或赋值变量时，不需要为变量指定 类型--------------&#x27;)message = 2019print(message, type(message)) 1234567891011print(&#x27;--------不能使用未创建的变量---------------&#x27;)message1 = 3.14print(message1, type(message1))```````pythonmessage = &quot;Hello Python world!&quot;print(message)message = &quot;Hello Python Crash Course world!&quot;print(message) 运行结果： 12---------在创建或赋值变量时，不需要为变量指定 类型--------------2019 &lt;class &#x27;int&#x27;&gt; 12--------不能使用未创建的变量---------------3.14 &lt;class &#x27;float&#x27;&gt; 12Hello Python world!Hello Python Crash Course world! 第2题题目要求： 在程序中可随时修改变量的值，而Python将始终记录变量的最新值。通过input函数接受用户的输入，注意该函数的返回为str类型。 代码如下 12345# input 函数的返回是strmessage = input(&quot;请输入float类型的数据：&quot;)message = float(message) # str --&gt; floatmessage = message * 10print(message, type(message)) 运行结果： 122.0 &lt;class &#x27;float&#x27;&gt; 第3题题目要求： 创建变量，将一条消息存储到变量中，再将其打印出来。 将一条消息存储到变量中，将其打印出来；再将变量的值修改为一条新消息，并将其打印出来。 使用input()函数，接收外部输入(输入字符)，并把结果存到变量中，组织消息内容，打印结果。 使用input()函数，接收外部输入(输入数字)，并把结果存到变量中，对这数进行平方运算，打印结果 代码如下 12345678910massage=&#x27;Hello World!&#x27;print(massage)massage1=2.2massage1=str(massage1)print(massage1)massage2=input(&#x27;输入字符&#x27;)print(massage2)massage3=input(&#x27;输入数字&#x27;)massage3=float(massage3)print(massage3**2) 运行结果： 1234Hello World!2.21.31.6900000000000002 第4题题目要求： 数字8：编写4个表达式，它们分别使用加法、减法、乘法和除法运算，但结果都是数字8。为使用print语句来显示结果，务必将这些表达式用括号括起来，也就是说，你应该编写4行类似于下面的代码：print(5 + 3)。输出应为4行，其中每行都只包含数字8。 使用input()函数，键盘输入两个整数，然后再对这两个数进行上述运算操作。 代码如下： 123456789101112print(2+6)print(11-3)print(2*4)print(32//4)num1=float(input(&#x27;num1&#x27;))num2=float(input(&#x27;num2&#x27;))print(num1+num2)print(num1-num2)print(num1*num2)print(num1/num2)#num1=4.5#num2=5.6 运行结果： 12345678888810.1-1.099999999999999625.20.8035714285714286 第5题题目要求： 使用input()函数，键盘输入两个浮点数，然后再对这两个数进行四则运算操作，观察浮点数计算误差。 使用input()函数，键盘输入两个浮点数，比较整这两个数的大小，并输出结果。 代码如下： 12345678910num1=float(input(&#x27;num1&#x27;))num2=float(input(&#x27;num2&#x27;))print(num1+num2)print(num1-num2)print(num1*num2)print(num1/num2)print(num1&gt;num2)print(num1&lt;num2)#num1=4.5#num2=6.7 运行结果： 12345611.2-2.230.1500000000000020.6716417910447761FalseTrue 第6题题目要求： 最喜欢的数字：将你最喜欢的数字存储在一个变量中，再使用这个变量创建一条消息，指出你最喜欢的数字，然后将这条消息打印出来。 使用input()函数，键盘输入两个3位数的整数，然后通过str()将它们转换为字符串，再使用+对它们进行拼接，并输出结果。 代码如下： 1234567massage=98print(&#x27;我最喜欢的数字是：&#x27;+str(massage))num1=str(input(&#x27;三位整数&#x27;))num2=str(input(&#x27;三位整数&#x27;))print(num1+um2)#num1=234#num2=456 运行结果： 12我最喜欢的数字是：98234456 第7题题目要求： 添加注释：选择你编写的两个程序，在每个程序中都至少添加一条注释。如果程序太简单，实在没有什么需要说明的，就在程序文件开头加上你的姓名和当前日期，再用一句话阐述程序的功能。 代码如下： 12345678num1=float(input(&#x27;num1&#x27;)) # str --&gt; floatnum2=float(input(&#x27;num2&#x27;)) # str --&gt; floatprint(num1+num2)print(num1-num2)print(num1*num2)print(num1/num2)print(num1&gt;num2)print(num1&lt;num2) 123#谢森时 3/20massage=&#x27;Hello World!&#x27;print(massage)","categories":[{"name":"Python","slug":"Python","permalink":"http://waxll.top/categories/Python/"}],"tags":[{"name":"PythonLearn","slug":"PythonLearn","permalink":"http://waxll.top/tags/PythonLearn/"}]},{"title":"Python学习笔记1","slug":"Python学习笔记1","date":"2021-03-17T12:02:43.000Z","updated":"2021-03-24T18:57:57.959Z","comments":true,"path":"2021/03/17/py1.html","link":"","permalink":"http://waxll.top/2021/03/17/py1.html","excerpt":"","text":"开发环境安装及配置安装Anaconda从官网下载安装包。 注意： Anaconda应安装在根目录； 安装路径中不能有中文目录； 此处两个选项都应打勾。 安装VS Code在插件栏中搜索安装Python插件 安装黑暗主题插件 安装Windows Terminal在Windows10应用商店中安装Windows Terminal。 设定缺省shell 在Windows Terminal中 Ctrl + ,打开配置文件， 先找到 profiles配置项，看里面 cmd.exe 对应的 guid是什么，拷贝 cmd.exe 对应的guid到defaultProfile中。 安装Jupyter Lab先更换pypi源为国内镜像源。 在控制台中输入： 1pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 即可将pipy源更换为清华镜像源。 在控制台中输入： 1pip install &quot;jupyterlab&gt;=3.0.0&quot; 当控制台出现**Successfully installed jupyterlab-3.0.5**即表明安装成功。 在控制台中输入： 1jupyter lab 即可启动Jupyter Lab 作业笔记工具安装安装Typora从官网下载安装包，安装 更改黑暗主题 安装Xmind使用QQ群里的文件安装破解版 Python编程常见问题使用英文输入法代码所有的字符都用英文输入法，特别是标点符号。 注意：字符串内容可使用中文。 代码编程一定要用 英文输入法，包括标点，否则就会出错。 代码编程一定要用 英文输入法，包括标点，否则就会出错。 代码编程一定要用 英文输入法，包括标点，否则就会出错。 Python缩进错误如果发现IndentationError: unexpected indent这个问题，检查代码缩进。 Python对缩进敏感，它通过缩进来判断语句块。 不允许同一级别的代码存在不同级别的缩进。 程序正确但Jupyter运行不出结果显示In[*]，如下图。 主要原因是Python程序后台运行繁忙(卡了)，来不及输出程序的结果，可能本身程序没问题。 请重新启动jupyter的kernel。 Jupyter Lab中，Kernel菜单–&gt;Restart。 VSCode中，关闭程序，重新开启。 重启Kernel后，所有的变量将被清空。 Hello World程序.py代码如下： 1print(&quot;Hello World&quot;) 运行结果： 1Hello World 运行结果截图： .ipynb代码如下： 1print(&quot;Hello World&quot;) 运行结果： 1Hello World 运行结果截图：","categories":[{"name":"Python","slug":"Python","permalink":"http://waxll.top/categories/Python/"}],"tags":[{"name":"PythonLearn","slug":"PythonLearn","permalink":"http://waxll.top/tags/PythonLearn/"}]},{"title":"一个带两个LED,两个独立式按键的系统","slug":"按键","date":"2020-07-25T04:33:17.000Z","updated":"2021-03-17T12:09:01.084Z","comments":true,"path":"2020/07/25/a2.html","link":"","permalink":"http://waxll.top/2020/07/25/a2.html","excerpt":"一个基于STC89C51设计的带两个LED，两个独立按键的系统。","text":"一个基于STC89C51设计的带两个LED，两个独立按键的系统。 设计要求按键K0为LED0的开关，按键K1为系统自锁状态切换按键；LED0为系统控制对象，LED1为自锁状态指示。系统处于非自锁状态时，按下K0，则LED0亮，松手即灭。当系统处于自锁状态时，每按下一次K0，LED0的亮灭状态发生一次改变。 按键去抖动 按键消去抖动原理 按键去抖动主要有硬件去抖与软件去抖，这里采用低采样率去抖的方式。实际操作是使用定时中断的方式实现，设定定时时长在20ms-200ms即可。实现代码如下： 1234567891011121314151617181920212223242526272829KEY0 EQU P1.0KEY1 EQU P1.1LED0 EQU P2.0LED1 EQU P2.1ORG 0000HAJMP MAINORG 000BHAJMP TIMEROORG 0030HMAIN: CLR F0 ;自锁标志位 SETB LED0 SETB LED1 MOV TMOD,#01H ;设置50ms定时 MOV TH0,#03CH MOV TL0,#0B0H MOV IE,#82H SETB TR0 SJMP $TIMERO: MOV TH0,#03CH ;中断复位 MOV TL0,#0B0H ACALL KEYPRESS RETIKEYPRESS: ;按键子程序 . . . RET 按键延迟处理为防止一次按键按下时被多次读键，因而要加入按键延时。由于在该设计方案中涉及到长按的操作为防止闪烁，因此要在按键按下时加入死循环。实现代码如下： 12345678910111213141516171819KEYPRESS: JNB KEY0,K0 JNB KEY1,K1 AJMP OUTK0: JNB F0,T001 CPL LED0 JNB KEY0,$ ;加入死循环 AJMP OUTT001: CLR LED0 JNB KEY0,$ ;加入死循环 SETB LED0 AJMP OUTK1: CPL F0 CPL LED1 JNB KEY1,$ ;加入死循环OUT:RET 最终完成代码12345678910111213141516171819202122232425262728293031323334353637383940414243KEY0 EQU P1.0KEY1 EQU P1.1LED0 EQU P2.0LED1 EQU P2.1ORG 0000HAJMP MAINORG 000BHAJMP TIMEROORG 0030HMAIN: CLR F0 ;自锁标志位 SETB LED0 SETB LED1 MOV TMOD,#01H ;设置50ms定时 MOV TH0,#03CH MOV TL0,#0B0H MOV IE,#82H SETB TR0 SJMP $TIMERO: MOV TH0,#03CH ;中断复位 MOV TL0,#0B0H ACALL KEYPRESS RETIKEYPRESS: ;按键子程序 JNB KEY0,K0 JNB KEY1,K1 AJMP OUTK0: JNB F0,T001 CPL LED0 JNB KEY0,$ ;加入死循环 AJMP OUTT001: CLR LED0 JNB KEY0,$ ;加入死循环 SETB LED0 AJMP OUTK1: CPL F0 CPL LED1 JNB KEY1,$ ;加入死循环OUT:RET 返回","categories":[{"name":"单片机","slug":"单片机","permalink":"http://waxll.top/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"C51汇编","slug":"C51汇编","permalink":"http://waxll.top/tags/C51%E6%B1%87%E7%BC%96/"}]},{"title":"发现一个不错的鼠标点击特效","slug":"发现一个不错的鼠标点击特效","date":"2020-07-24T21:36:49.000Z","updated":"2021-03-24T19:00:10.400Z","comments":true,"path":"2020/07/25/a1.html","link":"","permalink":"http://waxll.top/2020/07/25/a1.html","excerpt":"点击查看效果","text":"点击查看效果 使用方法在volantis/layout/layout.ejs 的body下方填入以下代码： 12&lt;div id=&quot;clickCanvas&quot; style=&quot; position:fixed;left:0;top:0;&quot;&gt;&lt;canvas class=&quot; sketch&quot; height=&quot;0&quot; width=&quot;0&quot;&gt;&lt;/canvas&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/waxll/blog-js/dj.js&quot;&gt;&lt;/script&gt; 我使用的主题是Votlantis其他主题方法位置可能有所不同。 返回","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://waxll.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://waxll.top/tags/Hexo/"}]},{"title":"Hexo博客搭建教程","slug":"Hexo博客搭建教程","date":"2020-05-03T16:00:00.000Z","updated":"2020-07-26T18:37:01.000Z","comments":true,"path":"2020/05/04/blogjcjc.html","link":"","permalink":"http://waxll.top/2020/05/04/blogjcjc.html","excerpt":"&emsp;&emsp;自从上次成功搭建博客之后我就一直想写篇教程，但是由于没有时间（主要是懒）也就一直没有写。直到这次五一放假，终于有了空闲的时间。我自己觉得我这样的小白写的教程应该比较全面，毕竟把什么坑都踩了一遍。接下来开始我们的博客搭建。","text":"&emsp;&emsp;自从上次成功搭建博客之后我就一直想写篇教程，但是由于没有时间（主要是懒）也就一直没有写。直到这次五一放假，终于有了空闲的时间。我自己觉得我这样的小白写的教程应该比较全面，毕竟把什么坑都踩了一遍。接下来开始我们的博客搭建。 搭建平台：Windos10 v1909 x64 博客框架：Hexo 安装环境下载Node.js前往官网下载Node.js 安装Node.js 点击Next即可 下载Git前往官网下载Git 安装Git 点击Next即可 部署环境注册Github并创建仓库注册成功Github账号后需要创建一个仓库 在Repository name 中输入”用户名.github.io” 注意用户名与注册用户名相同否则博客无法正常打开 配置SSH密钥 win+R 输入 “cmd”打开CMD 设置 “user name”和 “email” 12git config --global user.name &quot;Github用户名&quot;git config --global user.email &quot;GitHub注册邮箱&quot; 生成SSH密钥 1ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot; 这里回车就行然后会在C盘用户目录下会生成一个***.ssh文件夹,里面有私钥id_rsa和公钥id_rsa_pub***。 在Github上添加SSH密钥。具体步骤如下： 验证SSH密钥在CMD中输入: 1ssh -T git@github.com 安装Hexo 在D盘创建以后个Blog文件，切换到Blog目录下。 使用淘宝的npm源安装hexo 123npm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm install hexo-cli -gcnpm install hexo --save 初始化Hexo 1hexo init 此处若出现以下情形这需要将Blog文件夹下的文件清空再重试 安装相关插件 12345678910111213cnpm install hexo-generator-index --savecnpm install hexo-generator-archive --savecnpm install hexo-generator-category --savecnpm install hexo-generator-tag --savecnpm install hexo-server --savecnpm install hexo-deployer-git --savecnpm install hexo-deployer-heroku --savecnpm install hexo-deployer-rsync --savecnpm install hexo-deployer-openshift --savecnpm install hexo-renderer-marked@0.2 --savecnpm install hexo-renderer-stylus@0.2 --savecnpm install hexo-generator-feed@1 --savecnpm install hexo-generator-sitemap@1 --save 启动Hexo 在浏览器打开https://localhost:4000即可看到刚刚搭建的博客 部署博客到Github 配置**_config.yml在Blog目录下找到*_config.yml***文件,用文本编辑器(推荐Typora)打开编辑以下项目: 1234deploy: type: git repo: git@github.com:用户名/用户名.github.io.git branch: master 新建一篇帖子 1hexo new &quot;first post&quot; 便会在D:\\Blog\\source\\ _posts目录下生成first post.md的文件，可以用markdown编辑器编辑帖子。 设置身份信息 12git config --global user.name &quot;GitHub用户名&quot;git config --global user.email &quot;GitHub注册邮箱&quot; 部署Github 1hexo d -g 在浏览器打开:用户名.github.io即可看到刚刚编辑的博客。 到这里Hexo博客的基础搭建已经完成，更换主题的教程会下次更新。 返回","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://waxll.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://waxll.top/tags/Hexo/"}]},{"title":"鬼火少年","slug":"单片机","date":"2020-05-03T16:00:00.000Z","updated":"2020-07-26T18:37:01.000Z","comments":true,"path":"2020/05/04/ghsn.html","link":"","permalink":"http://waxll.top/2020/05/04/ghsn.html","excerpt":"","text":"刚开始学单片机，是个单片机小白，如果有哪里不对的请大家多多指教谢谢！ 爆闪灯：123456789101112131415161718192021222324252627282930ORG 0000H AJMP MAIN ORG 000BH AJMP TIMER0MAIN: CLR F0 //设置状态标志 MOV 30H,#5H //每个状态次 MOV TH0,#3CH //初始化中断定时器设置50ms MOV TL0,#0B0H MOV IE,#82H SETB TR0 SJMP $ TIMER0: MOV TH0,#3CH MOV TL0,#0B0H DJNZ 30H,T001 //判断循环次数 CPL F0 MOV 30H,#5HT001: JB F0,T002 //判断状态 CPL P1.0 CLR P1.1 CPL P1.2 CLR P1.3 SJMP T0_EXT002: CLR P1.0 CPL P1.1 CLR P1.2 CPL P1.3T0_EX: RETI 流水灯1234567891011121314151617181920212223 ORG 000H MOV R0,#0AH MOV A,#0FEH MOV P1,A AJMP MAIN ORG 000BH AJMP TIMEROMAIN: MOV TMOD,#10H MOV TL0,#0B0H MOV TH0,#3CH MOV R0,#0AH MOV IE,#82H SETB TR0 SJMP $TIMERO: MOV TL0,#0B0H MOV TH0,#3CH DJNZ R0,T0_EX RL A MOV P1,A MOV R0,#0AH T0_EX:RETI 最后放一个老师写的流水灯（我稍微改了下参数）1234567891011121314151617181920212223242526272829303132ORG 0000H AJMP MAIN ORG 000BH AJMP TIMER0MAIN: MOV P1,#0FEH CLR F0 MOV 30H,#10H //这里的原值是10H MOV 31H,#0FDH //这里的原值是0FEH MOV 32H,#10H MOV TMOD,#01H MOV TH0,#3CH MOV TL0,#0B0H MOV IE,#82H SETB TR0 SJMP $TIMER0: MOV TH0,#3CH MOV TL0,#0B0H DJNZ 32H,T0_EX MOV 32H,#10H DJNZ 30H,T001 CPL F0 MOV 30H,#15 //这里的原值是10HT001: MOV A,31H JB F0,T002 RL A SJMP T003T002: RR AT003: MOV 31H,A MOV P1,A T0_EX: RETI 这两个参数改动后便可流畅亮灯。 返回","categories":[{"name":"单片机","slug":"单片机","permalink":"http://waxll.top/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"AT89C51","slug":"AT89C51","permalink":"http://waxll.top/tags/AT89C51/"}]},{"title":"我的第一篇博客","slug":"第一篇Hexo博客","date":"2020-04-13T16:00:00.000Z","updated":"2020-07-26T18:37:01.000Z","comments":true,"path":"2020/04/14/firstblog.html","link":"","permalink":"http://waxll.top/2020/04/14/firstblog.html","excerpt":"1.为什么想搭建博客&emsp;&emsp;最初是在油管上学习如何建立V2ray服务器，找到了一个用博客伪装V2ray服务器的教程视频。在认真学习了视频的内容后，我便兴匆匆的去租了一个美国VPS的服务器。在经过一系列的操作后，V2ray服务器成功搭建。然而这个服务器根本不能用，太慢了，延迟上天，果然便宜没好货，跟隔着太平洋买了个垃圾差不多（穷是原罪T_T)。于是我对V2ray服务器的兴趣被磨得一干二净，却对博客起了兴趣。","text":"1.为什么想搭建博客&emsp;&emsp;最初是在油管上学习如何建立V2ray服务器，找到了一个用博客伪装V2ray服务器的教程视频。在认真学习了视频的内容后，我便兴匆匆的去租了一个美国VPS的服务器。在经过一系列的操作后，V2ray服务器成功搭建。然而这个服务器根本不能用，太慢了，延迟上天，果然便宜没好货，跟隔着太平洋买了个垃圾差不多（穷是原罪T_T)。于是我对V2ray服务器的兴趣被磨得一干二净，却对博客起了兴趣。 2.第一次&emsp;&emsp;于有之前购买垃圾服务器的经历，我便不打算购买服务 器搭建博客，而是使用了GitHub。我先是在油管上找了很多有关搭建博客的视频，在对这些视频认真学习之后。我开始了博客搭建。鉴于教程视频中是在Mc环境下进行搭建的，于是我打算在电脑上安装Linux虚拟机，并使用Hugo来搭建。在下载安装了Git和Hugo之后终于#hugo server，在本地成功建立博客。似乎快要成功了，然 而在部署到GitHub的时候出现了问题。不知道是什么原因虚拟机下的Deepin无法连接到GitHub，在上网查询很久依然无法解决，毕竟像我这样在虚拟机里搭建博客的是少数。这第一次搭建博客算是失败了。 3.第二次&emsp;&emsp;这次我推翻了上次用虚拟机搭建的方式，因为有人给我推荐了阿里云的试用服务器。这次我打算直接将博客搭建在阿里云服务器里。我先是在Freenom申请了一个免费域名。然后注册了阿里云的账号并完成实名认证获得了一台服务器。然后我安装了Finalshell成功连接上服务器，并在服务器里安装了宝塔面板。域名解析好后，将域名与网站绑定。但当我打开那个网址时显示网址需要备案。于是我便去备案，结果有我申请的是.tk(不要钱)的域名,不支持备案我晕(((φ(◎ロ◎;)φ)))，所以贫穷是原罪。自然这次也失败了。 4.第三次&emsp;&emsp;在吸取前两次失败的教训，我决定推倒重来。将Linux换成Windos，把Hugo换成Hexo，继续使用Github。这次有了前两次的经验，在看了晚上的教程后还是比较顺利的。然而在生成SSH密钥时出现了问题，密钥无法生成。于是我又上油管上搜索如何在Git上生成SSH密钥的视频，这次我按照视频中的方法成功生成了密钥，并成功连接上了Github。然而在部署到GitHub上时，遇到了问题，一直显示_config文件中deployer的设置不正确。于是我上网查找了很多关于这个问题的解决方法，试了不知多少次依然无法部署。于是我决定，重新生成一个博客，原模原样试了一遍，依然不行。功夫不负有心人，就在我在GitHub的仓库里乱翻的时候，发现了在仓库里也需要上传SSH公钥。于是我抱着试一试的心态往里面上传了SSH公钥，并重新部署了一次，居然成功了。我太激动了，声音都颤抖了q(≧▽≦q)！！！第三次搭建博客成功ψ(｀∇´)ψ！！！&emsp;&emsp;之后我写下了这篇博客，用来纪念这次搭建博客的经历。 5.小结&emsp;&emsp;这第一篇博客耗时四天，踩了无数的坑，当然也收获了很多,感觉自己能有一个能与别人分享自己想法的博客特别的开心O(∩_∩)O。虽然有点累,但是生命在于折腾!第一次写博客，内容比较简陋，望谅解。当然以后会进步的q(≧▽≦q)！ 以下是这次搭建博客所用到的教程资料和视频： Hexo&amp;Github Blog 搭建 FATAL E:\\blog not empty, please run hexo init on an empty folder and then copy your files into it解决方法 Win10+Hexo+GitHub搭建个人博客详解 5分钟搞定个人博客-hexo md 文件的编辑 如何用SSH密钥连接到Git仓库和远程服务器 手把手教你从0开始搭建自己的个人博客 |第二种姿势 | hugo手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo波仔分享… … 十分感谢他们的分享！ 返回","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://waxll.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://waxll.top/tags/Hexo/"}]}],"categories":[{"name":"Python","slug":"Python","permalink":"http://waxll.top/categories/Python/"},{"name":"单片机","slug":"单片机","permalink":"http://waxll.top/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"博客搭建","slug":"博客搭建","permalink":"http://waxll.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"PythonLearn","slug":"PythonLearn","permalink":"http://waxll.top/tags/PythonLearn/"},{"name":"C51汇编","slug":"C51汇编","permalink":"http://waxll.top/tags/C51%E6%B1%87%E7%BC%96/"},{"name":"Hexo","slug":"Hexo","permalink":"http://waxll.top/tags/Hexo/"},{"name":"AT89C51","slug":"AT89C51","permalink":"http://waxll.top/tags/AT89C51/"}]}